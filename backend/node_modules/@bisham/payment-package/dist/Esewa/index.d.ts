type RuntimeMode = 'Development' | 'Production';
interface EsewaPaymentConstructor {
    /**
     * @param {RuntimeMode} runtimeMode - `Development` or `Production` Mode to Perform Transaction
     *
     *@default Development
     *
     * Set to `Production` for Live Usage.
     */
    runtimeMode?: RuntimeMode;
    /**
     * @param {string | undefined} merchantId - A unique Id provided by `eSewa` to identify the merchant.
     *
     * Ommit this Field for `Development` runtime as `EPAYTEST` is set by Default.
     */
    merchantId?: string;
    /**
     * @param {string | undefined} successRedirectUrl - Redirects to this link After Successful Payment.
     */
    successRedirectUrl?: string;
    /**
     * @param {string | undefined} failureRedirectUrl - Redirects to this link After Payment Failure.
     */
    failureRedirectUrl?: string;
    /**
     * @param logConfig - Boolean to Show Logs or Not
     */
    logConfig?: boolean;
}
interface EsewaPaymentRequestInit {
    /**
     * @param {number} amount - Amount of product or item or ticket etc in Rs.
     */
    amount: number;
    /**
     * @param {number} taxAmount - Tax amount on product or item or ticket etc
     */
    taxAmount?: number;
    /**
     * @param {number} serviceCharge - Service charge by merchant on product or item or ticket etc
     */
    serviceCharge?: number;
    /**
     * @param {number} deliveryCharge -Delivery charge by merchant on product or item or ticket etc
     */
    deliveryCharge?: number;
    /**
     * @param {number} totalAmount - Total payment amount including tax, service and deliver charge. `[i.e totalAmount = amount + taxAmount + serviceCharge + deliveryCharge]`
     */
    totalAmount: number;
    /**
     * @param {string} processId - A unique ID of product or item or ticket etc
     */
    processId: string;
    /**
     * @param {string} successRedirectUrl - Success URL: a redirect URL of merchant application where customer will be redirected after SUCCESSFUL transaction
     */
    successRedirectUrl?: string;
    /**
     * @param {string} failureRedirectUrl - Failure URL: a redirect URL of merchant application where customer will be redirected after FAILURE or PENDING transaction
     */
    failureRedirectUrl?: string;
}
interface PaymentVerificationRequestInit {
    /**
     * @param {number} amount - Total payment amount (tAmt)
     */
    amount: number;
    /**
     * @param {string} processId - Product ID (pid) used on payment request
     */
    processId: string;
    /**
     * @param {string} referenceId - A unique payment reference code generated by eSewa
     */
    referenceId: string;
}
/**
 * An Esewa Wrapper for Making and Validating Transaction.
 *
 * @param {string} runtimeMode - Development | Production
 * @param merchantId - The Merchant Code Provided by Esewa
 * @param successRedirectUrl -  Redirect Url For Successful Payment
 * @param failureRedirectUrl -  Redirect Url For Payment Failure
 *
 * @example
 *
 *  * - Initializing the Package Without Global Redirect Urls
 * ```ts
 * const eswaPayment = new EsewaPayment();
  ```
 *
 * - Initializing the Package With Global Redirect Urls
 * ```ts
 * const eswaPayment = new EsewaPayment({
  successRedirectUrl: "https://example.com/success",
  failureRedirectUrl: "https://example.com/failure",
  });
  ```
 *
 */
export declare class EsewaPayment {
    private _runtimeMode;
    private _apiUrl;
    private _scd;
    private _successRedirectUrl;
    private _failureRedirectUrl;
    constructor(params?: EsewaPaymentConstructor);
    private _logConfig;
    /**
     * Sets the scd provided by eSewa
     * @param merchantId - This is the merchand code provided by eSewa and is known by scd
     */
    private _setMerchantId;
    /**
     * Sets the base API Url
     */
    private _setApiUrl;
    /**
     * Sets The Redirect Url for the App
     * @param successRedirectUrl - Redirect Url For Successful Payment.
     * @param failureRedirectUrl - Redirect Url For Payment Failure.
     */
    private _setRedirectUrls;
    /**
     * Initiate Esewa Payment Request
     */
    initiate(params: EsewaPaymentRequestInit): void;
    /**
     * Verify Payment From eSewa
     * @param {number} amount - Total payment amount (tAmt)
     * @param {string} processId - Product ID (pid) used on payment request
     * @param {string} referenceId - Reference ID recieved from esewa
     * @returns {Object} - Returns {success: boolean}
     */
    verifyPayment(params: PaymentVerificationRequestInit): Promise<{
        success: boolean;
    }>;
    private _makeVerficationRequest;
}
export {};
