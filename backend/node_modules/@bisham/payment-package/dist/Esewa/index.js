"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EsewaPayment = void 0;
const postForm_1 = __importStar(require("../postForm"));
/**
 * An Esewa Wrapper for Making and Validating Transaction.
 *
 * @param {string} runtimeMode - Development | Production
 * @param merchantId - The Merchant Code Provided by Esewa
 * @param successRedirectUrl -  Redirect Url For Successful Payment
 * @param failureRedirectUrl -  Redirect Url For Payment Failure
 *
 * @example
 *
 *  * - Initializing the Package Without Global Redirect Urls
 * ```ts
 * const eswaPayment = new EsewaPayment();
  ```
 *
 * - Initializing the Package With Global Redirect Urls
 * ```ts
 * const eswaPayment = new EsewaPayment({
  successRedirectUrl: "https://example.com/success",
  failureRedirectUrl: "https://example.com/failure",
  });
  ```
 *
 */
class EsewaPayment {
    constructor(params) {
        this._runtimeMode = 'Development';
        this._apiUrl = 'https://uat.esewa.com.np';
        this._scd = 'EPAYTEST';
        this._successRedirectUrl = 'https://example.com/esewaSuccessRedirect';
        this._failureRedirectUrl = 'https://example.com/esewaFailureRedirect';
        if (typeof params === 'undefined') {
            return;
        }
        const { runtimeMode = 'Development', merchantId, successRedirectUrl, failureRedirectUrl, logConfig = false, } = params;
        this._runtimeMode = runtimeMode;
        this._setMerchantId(merchantId);
        this._setApiUrl();
        this._setRedirectUrls(successRedirectUrl, failureRedirectUrl);
        if (logConfig) {
            this._logConfig();
        }
    }
    _logConfig() {
        console.log(`Runtime Mode set to ${this._runtimeMode}.`);
        console.log(`MerchantId set to ${this._scd}`);
        console.log(`Redirect url Set to ${this._apiUrl}`);
        console.log(`Success Redirect Url: ${this._successRedirectUrl}`);
        console.log(`Failure Redirect Url: ${this._failureRedirectUrl}`);
    }
    /**
     * Sets the scd provided by eSewa
     * @param merchantId - This is the merchand code provided by eSewa and is known by scd
     */
    _setMerchantId(merchantId) {
        if (this._runtimeMode === 'Production' &&
            typeof merchantId === 'undefined') {
            throw new Error('merchantId cannot Be Empty.');
        }
        if (typeof merchantId === 'string') {
            this._scd = merchantId;
        }
        else if (typeof merchantId !== 'undefined') {
            throw new Error('merchantId should be of type String.');
        }
    }
    /**
     * Sets the base API Url
     */
    _setApiUrl() {
        if (this._runtimeMode === 'Production') {
            this._apiUrl = 'https://esewa.com.np';
        }
    }
    /**
     * Sets The Redirect Url for the App
     * @param successRedirectUrl - Redirect Url For Successful Payment.
     * @param failureRedirectUrl - Redirect Url For Payment Failure.
     */
    _setRedirectUrls(successRedirectUrl, failureRedirectUrl) {
        if (typeof successRedirectUrl === 'string') {
            this._successRedirectUrl = successRedirectUrl;
        }
        else if (typeof successRedirectUrl !== 'undefined') {
            throw new Error('successRedirectUrl should be of type String.');
        }
        if (typeof failureRedirectUrl === 'string') {
            this._failureRedirectUrl = failureRedirectUrl;
        }
        else if (typeof failureRedirectUrl !== 'undefined') {
            throw new Error('failureRedirectUrl should be of type String.');
        }
    }
    /**
     * Initiate Esewa Payment Request
     */
    initiate(params) {
        if (Object.keys(params || {}).length === 0) {
            throw new Error('Cannot Initiate Payment without Valid Request Parameters.');
        }
        const paymentInitiateUrl = this._apiUrl + '/epay/main';
        const finalPostData = {
            su: params.successRedirectUrl || this._successRedirectUrl,
            fu: params.failureRedirectUrl || this._failureRedirectUrl,
            scd: this._scd,
            amt: params.amount,
            pdc: params.deliveryCharge || 0,
            pid: params.processId,
            psc: params.serviceCharge || 0,
            tAmt: params.totalAmount,
            txAmt: params.taxAmount || 0,
        };
        let checkForNullParams = {
            amt: 'amount',
            txAmt: 'taxAmount',
            psc: 'serviceCharge',
            pdc: 'deliveryCharge',
            scd: 'merchantId',
            tAmt: 'totalAmount',
            pid: 'processId',
            su: 'successRedirectUrl',
            fu: 'failureRedirectUrl',
        };
        for (let key in checkForNullParams) {
            if (typeof finalPostData[key] ===
                'undefined') {
                throw new Error(`${checkForNullParams[key]} cannot be Empty while Initiating Payment.`);
            }
        }
        (0, postForm_1.default)(paymentInitiateUrl, (0, postForm_1.convertObjectDataToString)(finalPostData));
    }
    /**
     * Verify Payment From eSewa
     * @param {number} amount - Total payment amount (tAmt)
     * @param {string} processId - Product ID (pid) used on payment request
     * @param {string} referenceId - Reference ID recieved from esewa
     * @returns {Object} - Returns {success: boolean}
     */
    verifyPayment(params) {
        const verificationUrl = this._apiUrl + '/epay/transrec';
        if (Object.keys(params || {}).length === 0) {
            throw new Error('Cannot Verify Payment without Valid Request Parameters.');
        }
        if (typeof window !== 'undefined') {
            throw new Error('Payment Verification Can only Be done in Server Side i.e. Node.js due to CORS Implementation on esewa Validate Payment API.');
        }
        let finalPostData = {
            amt: params.amount,
            pid: params.processId,
            rid: params.referenceId,
        };
        let checkForNullParams = {
            amt: 'amount',
            pid: 'processId',
            rid: 'referenceId',
        };
        for (let key in checkForNullParams) {
            if (typeof finalPostData[key] ===
                'undefined') {
                throw new Error(`${checkForNullParams[key]} cannot be Empty while Verifying Payment.`);
            }
        }
        return this._makeVerficationRequest(verificationUrl, finalPostData);
    }
    _makeVerficationRequest(path, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const finalPostData = Object.assign({ scd: this._scd }, params);
            let formData = (0, postForm_1.convertObjectDataToString)(finalPostData);
            for (let key in formData) {
                if (typeof formData[key] === 'undefined') {
                    throw new Error(`${key} cannot be Empty while Verifing Payment.`);
                }
            }
            const form = new URLSearchParams();
            for (let key in formData) {
                form.append(key, formData[key]);
            }
            try {
                let response = yield fetch(path, {
                    method: 'POST',
                    body: form,
                });
                let responseData = yield response.text();
                if (responseData.includes('Success')) {
                    return {
                        success: true,
                    };
                }
                return {
                    success: false,
                };
            }
            catch (error) {
                console.log(error);
                return {
                    success: false,
                };
            }
        });
    }
}
exports.EsewaPayment = EsewaPayment;
