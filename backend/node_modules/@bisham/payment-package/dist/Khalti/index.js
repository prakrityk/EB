"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KhaltiPayment = void 0;
class KhaltiPayment {
    constructor(params) {
        this._runtimeMode = 'Development';
        this._apiUrl = 'https://a.khalti.com/api/v2';
        this._khaltiSecretKey = 'live_secret_key_c29bff9015674b939338370b7ea9f7f2';
        this._websiteUrl = 'https://example.com';
        this._redirectUrl = 'https://example.com/redirectUrl';
        if (typeof params === 'undefined') {
            return;
        }
        const { runtimeMode = 'Development', khaltiSecretKey, websiteUrl, redirectUrl, logConfig = false, } = params;
        this._runtimeMode = runtimeMode;
        this._setKhaltiSecret(khaltiSecretKey);
        this._setApiUrl();
        this._setRedirectsAndWebsiteUrl(websiteUrl, redirectUrl);
        if (logConfig) {
            this._logConfig();
        }
    }
    _logConfig() {
        console.log(`Runtime Mode set to ${this._runtimeMode}.`);
        console.log(`Setting ${this._runtimeMode} API URL: ${this._apiUrl}`);
        console.log(`Setting ${this._runtimeMode} Key To: ${this._khaltiSecretKey}`);
        console.log(`Website Url: ${this._websiteUrl}`);
        console.log(`Redirect Url: ${this._redirectUrl}`);
    }
    _setApiUrl() {
        if (this._runtimeMode === 'Production') {
            this._apiUrl = 'https://khalti.com/api/v2';
        }
    }
    /**
     * Sets the secret key provided by Khalti
     * @param khaltiSecretKey - This is the secret key provided by Khalti
     */
    _setKhaltiSecret(khaltiSecretKey) {
        if (this._runtimeMode === 'Production' &&
            typeof khaltiSecretKey === 'undefined') {
            throw new Error('khaltiSecretKey Key Cannot Be Empty.');
        }
        if (typeof khaltiSecretKey === 'string') {
            this._khaltiSecretKey = khaltiSecretKey;
        }
        else if (typeof khaltiSecretKey !== 'undefined') {
            throw new Error('khaltiSecretKey should be of type String.');
        }
    }
    /**
     * Sets The Redirect Url for the App
     * @param websiteUrl - Website Url where Khalti is being Integrated
     * @param redirectUrl - Redirect Url after Payment By Khalti
     */
    _setRedirectsAndWebsiteUrl(websiteUrl, redirectUrl) {
        if (typeof websiteUrl === 'string') {
            this._websiteUrl = websiteUrl;
        }
        else if (typeof websiteUrl !== 'undefined') {
            throw new Error('websiteUrl should be of type String.');
        }
        if (typeof redirectUrl === 'string') {
            this._redirectUrl = redirectUrl;
        }
        else if (typeof redirectUrl !== 'undefined') {
            throw new Error('redirectUrl should be of type String.');
        }
    }
    getPidx(params) {
        if (Object.keys(params || {}).length === 0) {
            throw new Error('Cannot Initiate Request without Valid Parameters.');
        }
        if (typeof window !== 'undefined') {
            throw new Error('Pidx Can Only Be Generated On Server Side i.e. Node.js due to CORS error set on frontend. Implement This Function in Backend and send Its response to the Frontend to Overcome this Issue.');
        }
        const getPidxUrl = this._apiUrl + '/epayment/initiate/';
        const finalPostData = Object.assign({ website_url: this._websiteUrl || params.websiteUrl, return_url: this._redirectUrl || params.redirectUrl }, params);
        let checkForNullParams = [
            'return_url',
            'website_url',
            'amount',
            'purchase_order_id',
            'purchase_order_name',
        ];
        for (let key of checkForNullParams) {
            if (typeof finalPostData[key] === 'undefined') {
                throw new Error(`${key} cannot be Empty while Initiating Payment.`);
            }
        }
        return this._makeGetPidxRequest(getPidxUrl, finalPostData);
    }
    _makeGetPidxRequest(path, data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield fetch(path, {
                    method: 'POST',
                    headers: {
                        Authorization: `Key ${this._khaltiSecretKey}`,
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });
                return yield response.json();
            }
            catch (error) {
                console.log(error);
            }
        });
    }
    /**
     * Verify Payment From Khalti
     * @param {string} pidx - Product ID (pid) used on payment request
     * @example
     * ```ts
     * await khaltiPayment.verifyPayment("3owTGDFzmWrRPEsF3wFF7B")
     * ```
     */
    verifyPayment(pidx) {
        const verificationUrl = this._apiUrl + '/epayment/lookup/';
        if (typeof pidx === 'undefined') {
            throw new Error('Pidx Cannot be undefined While Verifying Payment.');
        }
        return this._makeVerficationRequest(verificationUrl, pidx);
    }
    _makeVerficationRequest(path, pidx) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield fetch(path, {
                    method: 'POST',
                    body: JSON.stringify({ pidx }),
                    headers: {
                        Authorization: `Key ${this._khaltiSecretKey}`,
                        'Content-Type': 'application/json',
                    },
                });
                return yield response.json();
            }
            catch (error) {
                console.log(error);
            }
        });
    }
}
exports.KhaltiPayment = KhaltiPayment;
